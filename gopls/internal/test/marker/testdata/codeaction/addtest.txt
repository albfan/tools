This test checks the behavior of the 'add test for FUNC' code action.

-- flags --
-ignore_extra_diags

-- go.mod --
module golang.org/lsptests/addtest

go 1.18

-- settings.json --
{
	"addTestSourceCodeAction": true
}

-- withcopyright/copyright.go --
// Copyright 2020 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//go:build go1.18

// Package main is for lsp test.
package main

func Foo(in string) string {return in} //@codeactionedit("Foo", "source.addTest", with_copyright)

-- @with_copyright/withcopyright/copyright_test.go --
@@ -0,0 +1,29 @@
+// Copyright 2020 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main_test
+
+import(
+	"golang.org/lsptests/addtest/withcopyright"
+	"testing"
+)
+
+func TestFoo(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      got := main.Foo(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("Foo() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- withoutcopyright/copyright.go --
//go:build go1.18

// Package copyright is for lsp test.
package copyright

func Foo(in string) string {return in} //@codeactionedit("Foo", "source.addTest", without_copyright)

-- @without_copyright/withoutcopyright/copyright_test.go --
@@ -0,0 +1,25 @@
+package copyright_test
+
+import(
+	"golang.org/lsptests/addtest/withoutcopyright"
+	"testing"
+)
+
+func TestFoo(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      got := copyright.Foo(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("Foo() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- missingtestfile/missingtestfile.go --
package main

func ExportedFunction(in string) string {return in} //@codeactionedit("ExportedFunction", "source.addTest", missing_test_file_exported_function)

type Bar struct {}

func (*Bar) ExportedMethod(in string) string {return in} //@codeactionedit("ExportedMethod", "source.addTest", missing_test_file_exported_recv_exported_method)

-- @missing_test_file_exported_function/missingtestfile/missingtestfile_test.go --
@@ -0,0 +1,25 @@
+package main_test
+
+import(
+	"golang.org/lsptests/addtest/missingtestfile"
+	"testing"
+)
+
+func TestExportedFunction(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      got := main.ExportedFunction(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("ExportedFunction() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- @missing_test_file_exported_recv_exported_method/missingtestfile/missingtestfile_test.go --
@@ -0,0 +1,27 @@
+package main_test
+
+import(
+	"golang.org/lsptests/addtest/missingtestfile"
+	"testing"
+)
+
+func TestBar_ExportedMethod(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      // TODO: construct the receiver type.
+      var b main.Bar
+      got := b.ExportedMethod(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("ExportedMethod() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- xpackagetestfile/xpackagetestfile.go --
package main

func ExportedFunction(in string) string {return in} //@codeactionedit("ExportedFunction", "source.addTest", xpackage_exported_function)
func unexportedFunction(in string) string {return in} //@codeactionedit("unexportedFunction", "source.addTest", xpackage_unexported_function)

type Bar struct {}

func (*Bar) ExportedMethod(in string) string {return in} //@codeactionedit("ExportedMethod", "source.addTest", xpackage_exported_recv_exported_method)
func (*Bar) unexportedMethod(in string) string {return in} //@codeactionedit("unexportedMethod", "source.addTest", xpackage_exported_recv_unexported_method)

type foo struct {}

func (*foo) ExportedMethod(in string) string {return in} //@codeactionedit("ExportedMethod", "source.addTest", xpackage_unexported_recv_exported_method)
func (*foo) unexportedMethod(in string) string {return in} //@codeactionedit("unexportedMethod", "source.addTest", xpackage_unexported_recv_unexported_method)

-- xpackagetestfile/xpackagetestfile_test.go --
package main

-- @xpackage_exported_function/xpackagetestfile/xpackagetestfile_test.go --
@@ -3 +3,21 @@
+import "testing"
+
+
+func TestExportedFunction(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      got := ExportedFunction(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("ExportedFunction() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- @xpackage_unexported_function/xpackagetestfile/xpackagetestfile_test.go --
@@ -3 +3,21 @@
+import "testing"
+
+
+func Test_unexportedFunction(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      got := unexportedFunction(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("unexportedFunction() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- @xpackage_exported_recv_exported_method/xpackagetestfile/xpackagetestfile_test.go --
@@ -3 +3,23 @@
+import "testing"
+
+
+func TestBar_ExportedMethod(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      // TODO: construct the receiver type.
+      var b Bar
+      got := b.ExportedMethod(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("ExportedMethod() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- @xpackage_exported_recv_unexported_method/xpackagetestfile/xpackagetestfile_test.go --
@@ -3 +3,23 @@
+import "testing"
+
+
+func TestBar_unexportedMethod(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      // TODO: construct the receiver type.
+      var b Bar
+      got := b.unexportedMethod(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("unexportedMethod() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- @xpackage_unexported_recv_exported_method/xpackagetestfile/xpackagetestfile_test.go --
@@ -3 +3,23 @@
+import "testing"
+
+
+func Test_foo_ExportedMethod(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      // TODO: construct the receiver type.
+      var f foo
+      got := f.ExportedMethod(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("ExportedMethod() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- @xpackage_unexported_recv_unexported_method/xpackagetestfile/xpackagetestfile_test.go --
@@ -3 +3,23 @@
+import "testing"
+
+
+func Test_foo_unexportedMethod(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      // TODO: construct the receiver type.
+      var f foo
+      got := f.unexportedMethod(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("unexportedMethod() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- aliasreceiver/aliasreceiver.go --
package main

type bar0 struct {}
type bar1 = bar0
type Bar = bar1

func (*Bar) ExportedMethod(in string) string {return in} //@codeactionedit("ExportedMethod", "source.addTest", pointer_receiver_exported_method)
func (*Bar) unexportedMethod(in string) string {return in} //@codeactionedit("unexportedMethod", "source.addTest", pointer_receiver_unexported_method)

type foo0 struct {}
type foo1 = foo0
type foo = foo1

func (foo) ExportedMethod(in string) string {return in} //@codeactionedit("ExportedMethod", "source.addTest", alias_receiver_exported_method)
func (foo) unexportedMethod(in string) string {return in} //@codeactionedit("unexportedMethod", "source.addTest", alias_receiver_unexported_method)

type baz0 struct{}
type baz1 = baz0
type baz = baz1

func newBaz0() baz0 {return baz0{}}

func (baz) method(in string) string {return in} //@codeactionedit("method", "source.addTest", alias_constructor_on_underlying_type)

type qux0 struct{}
type qux1 = qux0
type qux2 = qux1
type Qux = *qux2

func newQux1() (qux1, error) {return qux1{}, nil}

func (Qux) method(in string) string {return in} //@codeactionedit("method", "source.addTest", alias_constructor_on_different_alias_type)

-- aliasreceiver/aliasreceiver_test.go --
package main

-- @pointer_receiver_exported_method/aliasreceiver/aliasreceiver_test.go --
@@ -3 +3,23 @@
+import "testing"
+
+
+func TestBar_ExportedMethod(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      // TODO: construct the receiver type.
+      var b Bar
+      got := b.ExportedMethod(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("ExportedMethod() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- @pointer_receiver_unexported_method/aliasreceiver/aliasreceiver_test.go --
@@ -3 +3,23 @@
+import "testing"
+
+
+func TestBar_unexportedMethod(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      // TODO: construct the receiver type.
+      var b Bar
+      got := b.unexportedMethod(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("unexportedMethod() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- @alias_receiver_exported_method/aliasreceiver/aliasreceiver_test.go --
@@ -3 +3,23 @@
+import "testing"
+
+
+func Test_foo_ExportedMethod(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      // TODO: construct the receiver type.
+      var f foo
+      got := f.ExportedMethod(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("ExportedMethod() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- @alias_receiver_unexported_method/aliasreceiver/aliasreceiver_test.go --
@@ -3 +3,23 @@
+import "testing"
+
+
+func Test_foo_unexportedMethod(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      // TODO: construct the receiver type.
+      var f foo
+      got := f.unexportedMethod(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("unexportedMethod() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- @alias_constructor_on_underlying_type/aliasreceiver/aliasreceiver_test.go --
@@ -3 +3,22 @@
+import "testing"
+
+
+func Test_baz_method(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      b := newBaz0()
+      got := b.method(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("method() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- @alias_constructor_on_different_alias_type/aliasreceiver/aliasreceiver_test.go --
@@ -3 +3,25 @@
+import "testing"
+
+
+func TestQux_method(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      q, err := newQux1()
+      if err != nil {
+        t.Fatalf("could not contruct receiver type: %v", err)
+      }
+      got := q.method(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("method() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- multiinputoutput/multiinputoutput.go --
package main

func Foo(in, in1, in2, in3 string) (out, out1, out2 string) {return in, in, in} //@codeactionedit("Foo", "source.addTest", multi_input_output)

-- @multi_input_output/multiinputoutput/multiinputoutput_test.go --
@@ -0,0 +1,39 @@
+package main_test
+
+import(
+	"golang.org/lsptests/addtest/multiinputoutput"
+	"testing"
+)
+
+func TestFoo(t *testing.T) {
+  type args struct {
+    in string
+    in2 string
+    in3 string
+    in4 string
+  }
+  tests := []struct {
+    name string // description of this test case
+    args args
+    want string
+    want2 string
+    want3 string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      got, got2, got3 := main.Foo(tt.args.in, tt.args.in2, tt.args.in3, tt.args.in4)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("Foo() = %v, want %v", got, tt.want)
+      }
+      if true {
+        t.Errorf("Foo() = %v, want %v", got2, tt.want2)
+      }
+      if true {
+        t.Errorf("Foo() = %v, want %v", got3, tt.want3)
+      }
+    })
+  }
+}
-- xpackagerename/xpackagerename.go --
package main

import (
  mytime "time"
  myast "go/ast"
  mytest "testing"
)

var local mytest.T

func Foo(t mytime.Time, a *myast.Node) (mytime.Time, *myast.Node) {return t, a} //@codeactionedit("Foo", "source.addTest", xpackage_rename)

-- @xpackage_rename/xpackagerename/xpackagerename_test.go --
@@ -0,0 +1,35 @@
+package main_test
+
+import(
+	myast "go/ast"
+	"golang.org/lsptests/addtest/xpackagerename"
+	mytest "testing"
+	mytime "time"
+)
+
+func TestFoo(t *mytest.T) {
+  type args struct {
+    in mytime.Time
+    in2 *myast.Node
+  }
+  tests := []struct {
+    name string // description of this test case
+    args args
+    want mytime.Time
+    want2 *myast.Node
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *mytest.T) {
+      got, got2 := main.Foo(tt.args.in, tt.args.in2)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("Foo() = %v, want %v", got, tt.want)
+      }
+      if true {
+        t.Errorf("Foo() = %v, want %v", got2, tt.want2)
+      }
+    })
+  }
+}
-- xtestpackagerename/xtestpackagerename.go --
package main

import (
  mytime "time"
  myast "go/ast"
  mytest "testing"
)

var local mytest.T

func Foo(t mytime.Time, a *myast.Node) (mytime.Time, *myast.Node) {return t, a} //@codeactionedit("Foo", "source.addTest", xtest_package_rename)

-- xtestpackagerename/xtestpackagerename_test.go --
package main_test

import (
	yourast "go/ast"
	yourtest "testing"
	yourtime "time"
)

var fooTime = yourtime.Time{}
var fooNode = yourast.Node{}
var fooT yourtest.T

-- @xtest_package_rename/xtestpackagerename/xtestpackagerename_test.go --
@@ -7 +7,2 @@
+
+	"golang.org/lsptests/addtest/xtestpackagerename"
@@ -13 +15,27 @@
+
+func TestFoo(t *yourtest.T) {
+  type args struct {
+    in yourtime.Time
+    in2 *yourast.Node
+  }
+  tests := []struct {
+    name string // description of this test case
+    args args
+    want yourtime.Time
+    want2 *yourast.Node
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *yourtest.T) {
+      got, got2 := main.Foo(tt.args.in, tt.args.in2)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("Foo() = %v, want %v", got, tt.want)
+      }
+      if true {
+        t.Errorf("Foo() = %v, want %v", got2, tt.want2)
+      }
+    })
+  }
+}
-- returnwitherror/returnwitherror.go --
package main

func OnlyErr() error {return nil} //@codeactionedit("OnlyErr", "source.addTest", return_only_error)
func StringErr() (string, error) {return "", nil} //@codeactionedit("StringErr", "source.addTest", return_string_error)
func MultipleStringErr() (string, string, string, error) {return "", "", "", nil} //@codeactionedit("MultipleStringErr", "source.addTest", return_multiple_string_error)

-- @return_only_error/returnwitherror/returnwitherror_test.go --
@@ -0,0 +1,29 @@
+package main_test
+
+import(
+	"golang.org/lsptests/addtest/returnwitherror"
+	"testing"
+)
+
+func TestOnlyErr(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    wantErr bool
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      gotErr := main.OnlyErr()
+      if gotErr != nil {
+        if !tt.wantErr {
+          t.Errorf("OnlyErr() failed: %v", gotErr)
+        }
+        return
+      }
+      if tt.wantErr {
+        t.Fatal("OnlyErr() succeeded unexpectedly")
+      }
+    })
+  }
+}
-- @return_string_error/returnwitherror/returnwitherror_test.go --
@@ -0,0 +1,34 @@
+package main_test
+
+import(
+	"golang.org/lsptests/addtest/returnwitherror"
+	"testing"
+)
+
+func TestStringErr(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    want string
+    wantErr bool
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      got, gotErr := main.StringErr()
+      if gotErr != nil {
+        if !tt.wantErr {
+          t.Errorf("StringErr() failed: %v", gotErr)
+        }
+        return
+      }
+      if tt.wantErr {
+        t.Fatal("StringErr() succeeded unexpectedly")
+      }
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("StringErr() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- @return_multiple_string_error/returnwitherror/returnwitherror_test.go --
@@ -0,0 +1,42 @@
+package main_test
+
+import(
+	"golang.org/lsptests/addtest/returnwitherror"
+	"testing"
+)
+
+func TestMultipleStringErr(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    want string
+    want2 string
+    want3 string
+    wantErr bool
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      got, got2, got3, gotErr := main.MultipleStringErr()
+      if gotErr != nil {
+        if !tt.wantErr {
+          t.Errorf("MultipleStringErr() failed: %v", gotErr)
+        }
+        return
+      }
+      if tt.wantErr {
+        t.Fatal("MultipleStringErr() succeeded unexpectedly")
+      }
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("MultipleStringErr() = %v, want %v", got, tt.want)
+      }
+      if true {
+        t.Errorf("MultipleStringErr() = %v, want %v", got2, tt.want2)
+      }
+      if true {
+        t.Errorf("MultipleStringErr() = %v, want %v", got3, tt.want3)
+      }
+    })
+  }
+}
-- constructor/constructor.go --
package main

// Constructor returns the type T.
func NewReturnType() ReturnType {return ReturnType{}}

type ReturnType struct {}

func (*ReturnType) Method(in string) string {return in} //@codeactionedit("Method", "source.addTest", constructor_return_type)

// Constructor returns the type T and an error.
func NewReturnTypeError() (ReturnTypeError, error) {return ReturnTypeError{}, nil}

type ReturnTypeError struct {}

func (*ReturnTypeError) Method(in string) string {return in} //@codeactionedit("Method", "source.addTest", constructor_return_type_error)

// Constructor returns the type *T.
func NewReturnPtr() *ReturnPtr {return nil}

type ReturnPtr struct {}

func (*ReturnPtr) Method(in string) string {return in} //@codeactionedit("Method", "source.addTest", constructor_return_ptr)

// Constructor returns the type *T and an error.
func NewReturnPtrError() (*ReturnPtrError, error) {return nil, nil}

type ReturnPtrError struct {}

func (*ReturnPtrError) Method(in string) string {return in} //@codeactionedit("Method", "source.addTest", constructor_return_ptr_error)

-- @constructor_return_type/constructor/constructor_test.go --
@@ -0,0 +1,26 @@
+package main_test
+
+import(
+	"golang.org/lsptests/addtest/constructor"
+	"testing"
+)
+
+func TestReturnType_Method(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      r := main.NewReturnType()
+      got := r.Method(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("Method() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- @constructor_return_type_error/constructor/constructor_test.go --
@@ -0,0 +1,29 @@
+package main_test
+
+import(
+	"golang.org/lsptests/addtest/constructor"
+	"testing"
+)
+
+func TestReturnTypeError_Method(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      r, err := main.NewReturnTypeError()
+      if err != nil {
+        t.Fatalf("could not contruct receiver type: %v", err)
+      }
+      got := r.Method(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("Method() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- @constructor_return_ptr/constructor/constructor_test.go --
@@ -0,0 +1,26 @@
+package main_test
+
+import(
+	"golang.org/lsptests/addtest/constructor"
+	"testing"
+)
+
+func TestReturnPtr_Method(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      r := main.NewReturnPtr()
+      got := r.Method(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("Method() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- @constructor_return_ptr_error/constructor/constructor_test.go --
@@ -0,0 +1,29 @@
+package main_test
+
+import(
+	"golang.org/lsptests/addtest/constructor"
+	"testing"
+)
+
+func TestReturnPtrError_Method(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      r, err := main.NewReturnPtrError()
+      if err != nil {
+        t.Fatalf("could not contruct receiver type: %v", err)
+      }
+      got := r.Method(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("Method() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- constructorcomparison/constructorcomparison.go --
package main

// Foo have two constructors. NewFoo is prefered over others.
func CreateAFoo() Foo {return Foo{}}
func NewFoo() Foo {return Foo{}}

type Foo struct{}

func (*Foo) Method(in string) string {return in} //@codeactionedit("Method", "source.addTest", constructor_comparison_new)

// Bar have two constructors. Bar is preferred due to alphabetical ordering.
func ABar() (Bar, error) {return Bar{}, nil}
// func CreateABar() Bar {return Bar{}}

type Bar struct{}

func (*Bar) Method(in string) string {return in} //@codeactionedit("Method", "source.addTest", constructor_comparison_alphabetical)

-- @constructor_comparison_new/constructorcomparison/constructorcomparison_test.go --
@@ -0,0 +1,26 @@
+package main_test
+
+import(
+	"golang.org/lsptests/addtest/constructorcomparison"
+	"testing"
+)
+
+func TestFoo_Method(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      f := main.NewFoo()
+      got := f.Method(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("Method() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
-- @constructor_comparison_alphabetical/constructorcomparison/constructorcomparison_test.go --
@@ -0,0 +1,29 @@
+package main_test
+
+import(
+	"golang.org/lsptests/addtest/constructorcomparison"
+	"testing"
+)
+
+func TestBar_Method(t *testing.T) {
+  tests := []struct {
+    name string // description of this test case
+    arg string
+    want string
+  }{
+    // TODO: Add test cases.
+  }
+  for _, tt := range tests {
+    t.Run(tt.name, func(t *testing.T) {
+      b, err := main.ABar()
+      if err != nil {
+        t.Fatalf("could not contruct receiver type: %v", err)
+      }
+      got := b.Method(tt.arg)
+      // TODO: update the condition below to compare got with tt.want.
+      if true {
+        t.Errorf("Method() = %v, want %v", got, tt.want)
+      }
+    })
+  }
+}
